{"name":"DataTransferKit","tagline":"A library for multiphysics solution transfer.","body":"Data Transfer Kit (DTK)\r\n***********************\r\n\r\nThe Data Transfer Kit (DTK) is an open-source software library\r\ndesigned to provide parallel services for solution transfer for\r\nmultiphysics simulations. DTK uses a general operator design to\r\nprovide scalable parallel services for solution transfer between\r\nshared volumes and surfaces. DTK is supported and used by the\r\nfollowing Department of Energy multiphysics modeling and simulation\r\nprograms:\r\n\r\n* Consortium for Advanced Simulation of Light Water Reactors (CASL)\r\n  <http://www.casl.gov>\r\n\r\n* National Highway Traffic Safety Administration (NHTSA)\r\n  <http://batterysim.org>\r\n\r\n* Nuclear Energy Advanced Modeling and Simulation (NEAMS)\r\n  <http://www.ne.anl.gov/NEAMS/>\r\n\r\n\r\nDataTransferKit Development Team\r\n================================\r\n\r\nDTK is developed and maintained by:\r\n\r\n* Stuart Slattery <slatterysr@ornl.gov>\r\n\r\n* Damien Lebrun-Grandie <lebrungrandt@ornl.gov>\r\n\r\n* Roger Pawlowski <rppawlo@sandia.gov>\r\n\r\n\r\nDataTransferKit Packages\r\n========================\r\n\r\nDTK has the following packages:\r\n\r\n**Utils**\r\n    General utilities for software development including exception\r\n    handling, MPI-based tools, and functional programming tools\r\n\r\n**Interface**\r\n    Core DTK interface package. Interfaces are divided into two\r\n    categories: *Client* and *Operator*. *Client* interfaces define a\r\n    polymorphic API implemented by client applications providing\r\n    access to mesh, geometry, parallel decomposition, shape functions,\r\n    and parametric mappings. *Operator* interfaces define the general\r\n    operator for solution transfer and other concepts for\r\n    constructing solution transfer operators from client code.\r\n\r\n**Operators**\r\n    DTK solution transfer operator implementation package. Operators\r\n    contains implementations of the following algorithms:\r\n\r\n    * Shape function interpolation\r\n    * Moving least square reconstruction\r\n    * Spline interpolation\r\n\r\n**Adapters**\r\n    Client interface adapters for common mesh databases,\r\n    discretization libraries, and geometric objects. Implementations\r\n    include:\r\n\r\n    * Sierra Toolkit Mesh (STK Mesh) <http://trilinos.org/packages/stk/>\r\n\r\n    * Intrepid: Interoperable Tools for Rapid dEveloPment of\r\n      compatIble Discretizations\r\n      <http://trilinos.org/packages/intrepid/>\r\n\r\n    * MOAB: A Mesh-Oriented datABase\r\n      <http://trac.mcs.anl.gov/projects/ITAPS/wiki/MOAB>\r\n\r\n    * Basic geometric objects\r\n\r\n    Outside of the DTK source code, other applications have\r\n    implementations of the DTK client interfaces in their code base\r\n    that may be used to leverage the DTK services and interoperate\r\n    with other libraries that have implemented the interfaces. These\r\n    include:\r\n\r\n    * AMP: Advanced Multi-Physics\r\n      <https://rsicc.ornl.gov/codes/ccc/ccc7/ccc-793.html>\r\n\r\n\r\nQuestions, Bug Reporting, and Issue Tracking\r\n============================================\r\n\r\nQuestions, bug reporting and issue tracking are provided by\r\nGitHub. Please report all bugs by creating a new issue. You can ask\r\nquestions by emailing the developers or by creating a issue with the\r\nquestion tag.\r\n\r\n\r\nDependencies\r\n============\r\n\r\nDataTransferKit is designed to build and run with a minimum number of\r\ndependencies and is structured largely as a Trilinos package.  The\r\ndependenices and third-party libraries (TPLs) necessary to build DTK\r\nare all open-source and freely available. The Dependencies for DTK are\r\nlisted in the following table:\r\n\r\n+-----------------------+---------------+---------------------------------------+\r\n| Dependency            | Required      | Comments                              |\r\n+=======================+===============+=======================================+\r\n| C++11                 | Yes           | GNU, Intel, and Clang are suggested   |\r\n+-----------------------+---------------+---------------------------------------+\r\n| DTKData               | Yes           | Large binary files for tests/examples |\r\n+-----------------------+---------------+---------------------------------------+\r\n| TriBITS               | Yes           | Build system provided with Trilinos   |\r\n+-----------------------+---------------+---------------------------------------+\r\n| Trilinos              | Yes           | Current git revision required         |\r\n+-----------------------+---------------+---------------------------------------+\r\n| BLAS/LAPACK           | Yes           | Use vendor-specific implementation    |\r\n+-----------------------+---------------+---------------------------------------+\r\n| MPI                   | No            | OpenMPI and MPICH are suggested       |\r\n+-----------------------+---------------+---------------------------------------+\r\n| MOAB                  | No            | Required to build MOAB adapters       |\r\n+-----------------------+---------------+---------------------------------------+\r\n\r\nYou can get the most recent Trilinos git revision at\r\n<https://software.sandia.gov/trilinos/repositories/publicTrilinos>. It\r\nis anticipated that when Trilinos 12.0 is released in the spring, DTK\r\nwill depend on that release instead of the development\r\nhead. Currently, features targeted for the 12.0 Trilinos release that\r\nare not present in the current 11.12 release are required by DTK and\r\ntherefore the development head is needed at present to build DTK.\r\n\r\nTo use build some examples and tests you will need the DTKData\r\nrepository which can be found at\r\n<https://github.com/ORNL-CEES/DTKData>. Simply check out the\r\nrepository into the top level DataTransferKit directory or provide a\r\nsoft link of to the location of the repository.\r\n\r\n\r\nBuilding DTK\r\n============\r\n\r\nThe following steps can be followed to build DTK with MPI support as\r\nwell as tests and examples. First, checkout DataTransferKit (assumed\r\nto be in a directory named `DataTransferKit` for these\r\ninstructions). Next create a soft link to the cloned copy of the\r\nDTKData repository::\r\n\r\n    > cd DataTransferKit\r\n    > ln -s $PATH_TO_DTKDATA\r\n\r\nAfter this, we need to create a soft link of DTK into the main\r\nTrilinos directory. We do this because DTK is a TriBITS package and\r\nwill build as a part of the Trilinos build, effectively becoming a\r\nlinkable package include among the larger group of Trilinos\r\npackages. We create this link as::\r\n\r\n    > cd $PATH_TO_TRILINOS\r\n    > ln -s $PATH_TO_DATATRANSFERKIT\r\n\r\nTriBITS is a CMake-based meta-build system\r\n<https://github.com/TriBITSPub> used by Trilinos. Although freely\r\navailable on GitHub, a version is also included as a snapshot in\r\nTrilinos and we use that version here. To setup the build we will make\r\ntwo directories; one for building and one for installing::\r\n\r\n    > mkdir $PATH_TO_BUILD_DIR\r\n    > mkdir $PATH_TO_INSTALL_DIR\r\n    > cd $PATH_TO_BUILD_DIR\r\n\r\nNext we can run a build shell script that executes CMake with a number\r\nof options to configure both Trilinos and DataTransferKit::\r\n\r\n    #!/bin/bash\r\n\r\n    # Clear previous configure\r\n    rm -rf CMakeCache.txt\r\n    rm -rf CMakeFiles\r\n\r\n    cmake \\\r\n    -D CMAKE_INSTALL_PREFIX:PATH=${PATH_TO_INSTALL_DIR} \\\r\n    -D CMAKE_BUILD_TYPE:STRING=DEBUG \\\r\n    -D CMAKE_VERBOSE_MAKEFILE:BOOL=OFF \\\r\n    -D TPL_ENABLE_MPI:BOOL=ON \\\r\n    -D MPI_BASE_DIR:PATH=$PATH_TO_MPI_INSTALL \\\r\n    -D TPL_BLAS_LIBRARIES:STRING=\"${PATH_TO_BLAS_LIB}\" \\\r\n    -D TPL_LAPACK_LIBRARIES:STRING=\"${PATH_TO_LAPACK_LIB}\" \\\r\n    -D Trilinos_ENABLE_CXX11:BOOL=ON \\\r\n    -D Trilinos_ENABLE_ALL_OPTIONAL_PACKAGES:BOOL=OFF \\\r\n    -D Trilinos_ASSERT_MISSING_PACKAGES=OFF \\\r\n    -D Trilinos_EXTRA_REPOSITORIES=\"DataTransferKit\" \\\r\n    -D Trilinos_ENABLE_DataTransferKit:BOOL=ON \\\r\n    -D DataTransferKit_ENABLE_DBC:BOOL=ON \\\r\n    -D DataTransferKit_ENABLE_TESTS:BOOL=ON \\\r\n    -D DataTransferKit_ENABLE_EXAMPLES:BOOL=ON \\\r\n    $PATH_TO_TRILINOS\r\n\r\nSome details on the script: \r\n\r\n* Changing the variable `CMAKE_BUILD_TYPE` from `DEBUG` to `RELEASE`\r\n  will produce an optimized build instead of debug build.\r\n\r\n* `MPI_BASE_DIR:PATH=$PATH_TO_MPI_INSTALL` tells CMake where the MPI\r\n  installation you would like to use resides. If you only have one and\r\n  it is set in your environment, simply setting\r\n  `TPL_ENABLE_MPI:BOOL=ON` can be enough.\r\n\r\n* `TPL_BLAS_LIBRARIES` and `TPL_LAPACK_LIBRARIES` point to the BLAS and\r\n  LAPACK libraries installed on your system.\r\n\r\n* `Trilinos_EXTRA_REPOSITORIES=\"DataTransferKit\"` indicates to TriBITS\r\n  that we are adding DataTransferKit as an additional Trilinos\r\n  package.\r\n\r\n* `Trilinos_ENABLE_DataTransferKit:BOOL=ON` instructs TriBITS to build\r\n  DataTransferKit\r\n\r\n* `DataTransferKit_ENABLE_DBC` toggles the DataTransferKit\r\n  Design-by-Contract feature `ON` or `OFF`. This feature adds many\r\n  layers of checks into the code useful for debugging purposes at that\r\n  cost of significant additional runtime. Enabling the feature is\r\n  recommended for new users to verify inputs and implementations. This\r\n  feature should be disabled for production calculations once an\r\n  implementation is tested.\r\n\r\n* `DataTransferKit_ENABLE_TESTS` toggles if unit tests are `ON` or\r\n  `OFF`\r\n\r\n* `DataTransferKit_ENABLE_EXAMPLES=ON` toggles if examples are `ON` or\r\n  `OFF`\r\n\r\nTo build other packages of DTK, the syntax is similar. For example, to\r\nadd the Moab client interface implementations to the build add the\r\nfollowing::\r\n\r\n    -D TPL_ENABLE_MOAB:BOOL=ON \\\r\n    -D MOAB_LIBRARY_DIRS:PATH=${PATH_TO_MOAB_INSTALL}/lib \\\r\n    -D MOAB_INCLUDE_DIRS:PATH=${PATH_TO_MOAB_INSTALL}/include \\\r\n    -D Trilinos_ENABLE_DataTransferKitMoabAdapters:BOOL=ON \\\r\n\r\nConfiguration, building, testing, installing (assuming\r\n`DataTransferKit_ENABLE_TESTS` is `ON`) then proceeds as follows\r\nassuming 8 threads are available for building and testing::\r\n\r\n    > cd $PATH_TO_BUILD_DIR\r\n    > ./run_cmake_configure.sh\r\n    > make -j8\r\n    > ctest -j8\r\n    > make -j8 install\r\n\r\nIt is always recommended to build and run unit tests when installing\r\nDTK to ensure that the installation process was correct and that DTK\r\nhas no bugs dependent on your system. If your application code using\r\nDTK is not working and unit tests are failing, this can help the\r\ndevelopers track down the problem.\r\n","google":"UA-59632630-1","note":"Don't delete this file! It's used internally to help with page regeneration."}